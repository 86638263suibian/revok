Installation Guide
-------------------

1 Architecture overview

1.1 Components
Revok consists of the following components. They can be deployed in both integrated (single node) and distributed (multiple nodes) environment.

(1) Web console
Revok web console provides the user interface for submitting scan tasks.

(2) REST API
Revok REST APIs are defined to receive and handle requests from the web console.

(3) Messaging server
Messaging server stores scan requests and distributes them to Caroline nodes. When requests were received, new messages would be produced and kept in a queue until Caroline nodes consume messages from the queue.

(4) Caroline nodes
Revok Caroline nodes implement scans with a group of testing modules and generate final scan reports.

(5) Database
Details for all scan tasks are recorded in the database. It can be used for data query or statistic.


1.2 Communication among components
Communication for Revok components is as below. The messaging flow is from left to right.


    frontend      |      backend                    --------------
                  |                                |Caroline Node1|
   -----------    |    -----------     --------    |Caroline Node2|    ---------
  |Web Console|---|---|REST Server|---|ActiveMQ|---|      .       |---|DB Server|
   -----------    |    -----------     --------    |      .       |    ---------
                  |                                |      .       |
                  |                                |Caroline Noden|
                  |                                 --------------



2 Deployment

2.1 Preparation

(1) Initial settings
The global configuration file (conf/revok.conf) defines the settings for starting Revok service. Please reset or keep the default values according to your requirements.

(2) Iptables rules
Define iptables rules correctly to make sure remote connections among Revok components are available.

(3) SELinux rules
Configure SELinux rules if needed to make Revok service run smoothly.

(4) DNS settings
Add maps of hostnames and IP addresses to the hosts file in distributed environment.


2.2 Database server
PostgreSQL is the storage for Revok history data. Other database options will be added in the future.

Step 1: installing and initializing PostgreSQL
Download and install the right version for your operating system referring to http://www.postgresql.org/download/. Edit configuration file ($PGSQL_DATA_DIR/postgresql.conf) to set the listening IP address and port.

[Demo for Fedora 20]
$ yum install -y postgresql-server postgresql
$ postgresql-setup initdb
$ vi /var/lib/pgsql/data/postgresql.conf
listen_addresses = '*'
port = 5432
$ systemctl enable postgresql.service

Step 2: creating user and database
Start PostgreSQL service. Create database for Revok and the user for its maintenance.

[Demo for Fedora 20]
$ systemctl start postgresql.service
$ su - postgres
$ psql
postgres=# create database revok;
postgres=# create user revok with password 'revok_passwd';

Step 3: configuring client authentication
Edit the configuration file ($PGSQL_DATA_DIR/pg_hba.conf) for client authentication. Apply MD5 authentication to revok user and restart the service.

[Demo for Fedora 20]
$ vi /var/lib/pgsql/data/pg_hba.conf
(Add the following line in # IPv4 local connections section)
host revok revok 0.0.0.0/0 md5
$ systemctl restart postgresql.service


2.3 Message queue server
ActiveMQ works as the messaging server in Revok.

Step 1: installing ActiveMQ
Download from http://activemq.apache.org/download.html.

[Demo for Fedora 20]
$ wget http://mirror.metrocast.net/apache/activemq/5.10.0/apache-activemq-5.10.0-bin.tar.gz
$ tar xzvf apache-activemq-5.10.0-bin.tar.gz

Step 2: configuring ActiveMQ
Edit configuration file ($ACTIVEMQ_DIR/conf/activemq.xml) to add authentication plugin, then start ActiveMQ service.

[Demo for Fedora 20]
$ vi apache-activemq-5.10.0/conf/activemq.xml
(Add the following lines in <broker></broker> section)
<plugins>
    <simpleAuthenticationPlugin>
        <users>
            <authenticationUser username="caroline" password="caroline_passwd" groups="users"/>
        </users>
    </simpleAuthenticationPlugin>
</plugins>
$ apache-activemq-5.10.0/bin/activemq start


2.4 REST API server

Step 1: preparing dependent packages
The list of basic packages required by REST API server.
- ruby (>=1.9.2)
- rubygems
The list of required gems.
- nokogiri
- mechanize
- pg
- stomp
- mail

[Demo for Fedora 20]
$ yum install -y ruby rubygems
$ gem install $REQUIRED_GEMS

Step 2: setting environment variables
Set options defined in the global configuration file as environment variables.

[Demo for Fedora 20]
$ sh revok/bin/setenv.sh

Step 3: importing data schema to database
Create tables in the revok database.

[Demo for Fedora 20]
$ ruby revok/db/initdb.rb

Step 4: starting rest-served

[Demo for Fedora 20]
$ revok/rest/rest-served start


2.5 Caroline nodes

Step 1: preparing dependent packages
All dependent packages of REST API Server are required. Other dependency is as below.
- python (>=2.6)
- pip (https://pip.pypa.io/en/latest/installing.html)
- mitmdump (http://mitmproxy.org/doc/install.html)
- phantomjs (http://phantomjs.org/download.html)
- ImageMagick
- openssl
- sslscan
- expect
- zip

[Demo for Fedora 20]
$ yum install -y python ImageMagick openssl sslscan expect
$ wget https://bootstrap.pypa.io/get-pip.py
$ python get-pip.py
$ pip install mitmproxy
$ wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-linux-x86_64.tar.bz2
$ tar xjvf phantomjs-1.9.7-linux-x86_64.tar.bz2
$ cp phantomjs-1.9.7-linux-x86_64/bin/phantomjs /usr/bin/

Step 2: setting environment variables
The same as step 2 for REST API Server.

Step 3: starting carolined

[Demo for Fedora 20]
$ revok/caroline/carolined start


2.6 Web console

2.6.1 Start by WEBrick

Step 1: preparing dependent packages
All dependent packages of REST API Server are required. Other dependency is as below.
The list of required gems.
- rack
- rake

[Demo for Fedora 20]
$ gem install $REQUIRED_GEMS

Step 2: starting frontd

[Demo for Fedora 20]
$ revok/webconsole/frontd start

2.6.2 Start by Apache

Step 1: preparing dependent packages
All dependent packages of REST API Server are required. Other dependency is as below.
The list of required packages.
- httpd
The list of required gems.
- passenger

[Demo for Fedora 20]
$ yum install -y httpd
$ gem install passenger
$ passenger-install-apache-module

Step 2: copying code to httpd data directory

[Demo for Fedora 20]
$ cp -r revok/webconsole /var/www/html/revok
$ ln -s /var/www/html/revok/public /var/www/html/scanner

Step 3: configuring httpd
Add loadmodule option for passenger and vhost setting for the application to httpd.conf, then start httpd service.

[Demo for Fedora 20]
$ vi /etc/httpd/conf/httpd.conf
(Add the following lines)
LoadModule passenger_module /usr/local/gems/ruby-1.9.3-p547/gems/passenger-4.0.48/buildout/apache2/mod_passenger.so
<IfModule mod_passenger.c>
    PassengerRoot /usr/local/gems/ruby-1.9.3-p547/gems/passenger-4.0.48
    PassengerDefaultRuby /usr/local/gems/ruby-1.9.3-p547/wrappers/ruby
</IfModule>
<VirtualHost *:$FRONT_PORT>
    ServerName $FRONT_HOST
    RewriteEngine on
    RewriteRule ^/$ scanner/html/ [R]
    PassengerAppRoot /var/www/html/revok/public
    <Directory /var/www/html/revok/public>
        AllowOverride all
        Options -MultiViews
        Require all granted
        Order allow,deny
        Allow from all
    </Directory>
</VirtualHost>
$ systemctl start httpd.service
Access the web console via url http://$FRONT_HOST:$FRONT_PORT.



3 Monitor and troubleshoot

3.1 Service status
After startup, check service status to confirm all of the services are running.

(1) Status for ActiveMQ
$ revok/activemq/activemqd status

(2) Status for Caroline
$ revok/caroline/carolined status

(3) Status for REST service
$ revok/rest/rest-served status

(4) Status for web console started by WEBrick
$ revok/webconsole/frontd status


3.2 Log files
Turn to log files for detailed running information or for troubleshooting when error occured.

(1) Log file for ActiveMQ
revok/.backend/logs/activemqd.log

(2) Log file for Caroline
revok/.backend/logs/carolined.log

(3) Log file for REST service
revok/.backend/logs/rest_served.log

(4) Log file for web console
revok/.frontend/logs/frontd.log
